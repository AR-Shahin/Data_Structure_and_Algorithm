#include<iostream>
#include<stdlib.h>
using namespace std;

void initial();
void insertFirst(int val);
void insertLast(int val);
void insertAtPosition(int pos,int val);
void display();
int lengthOfList();
void deleteFirstNode();
void deleteLastNode();
void deleteNodeByPosition(int pos);

typedef struct Node{
    int data;
    struct Node *next;
}node;

int count = 0,i=1;
node *head;

int main()
{
    initial();
    insertLast(5);
    insertLast(10);
    insertFirst(20);
    insertLast(500);
    insertLast(800);
    insertLast(900);
    insertLast(111);
    insertFirst(30);
    insertAtPosition(4,1);
    display();
    cout<<endl;
    deleteNodeByPosition(9);
     display();
    return 0;
}

void initial(){
    head = 0;
}
int lengthOfList(){
    return count;
}
void display(){
    if (head == 0){
        cout<<"Empty List"<<endl;
    }else{
        cout<<"Display : ";
        node *temp;
        temp = head;
        while(temp != 0){
            cout<<temp->data<<" ";
            temp = temp->next;
        }
    }
    cout<<endl;
}
void insertFirst(int val){
    node *newNode;
    newNode = new node;
    newNode->data = val;
    newNode->next = head;
    head = newNode;
    count++;
}

void insertLast(int val){
    if(head == 0){
        insertFirst(val);
    }else{
        node *newNode,*temp;
        newNode = new node;
        newNode->data = val;
        newNode->next = 0;
        temp = head;
        while(temp->next !=0){
            temp = temp->next;
        }
        temp->next = newNode;
        count++;
    }
}

void insertAtPosition(int pos,int val){
    int index =1;
    if(pos == 0){
        cout<<"Position Can't be Zero!!\n";
        return;
    }
    if(pos == 1){
        insertFirst(val);
        return;
    }
    if(lengthOfList() < pos){
        cout<<"Invalid Position!"<<endl;
    }else{
        node *temp,*newNode;
        temp = head;
        while(index<pos-1){
            temp = temp->next;
            index++;
        }
        newNode = new node;
        newNode->data = val;
        newNode->next = temp->next;
        temp->next = newNode;
        count++;
    }
}

void deleteFirstNode(){
    if(head == 0){
        cout<<"Empty List"<<endl;
    }
    node *temp;
    temp = head;
    head = head->next;
    free(temp);
}
void deleteLastNode(){
     if(head == 0){
        cout<<"Empty List"<<endl;
    }
    node *temp,*prev;
    temp = head;
    while(temp->next != 0){
            prev = temp;
        temp = temp->next;
    }
    if(head == temp){
        head = 0;
    }else{
        prev->next = 0;
    }
    free(temp);
}
void deleteNodeByPosition(int pos){
    if(head == 0){
        cout<<"Empty List"<<endl;
        return;
    }
    if(pos> lengthOfList()){
        cout<<"\nInvalid Position\n";
        return;
    }
    if(pos == 1){
        deleteFirstNode();
        return;
    }
    int index = 1;
    node *temp,*prevNode,*nextNode;
    temp = head;
    while(index < pos-1){
        temp = temp->next;
          //cout<<"t "<<temp->data;
        index++;
    }
    prevNode = temp;
    nextNode = prevNode->next;
    temp->next = nextNode->next;
    free(nextNode);


}
