// Documentation
/*  print_value : print all items in array
    print_index : print index and position [must use search function]
    delete_index : delete index
    delete_iteam : delete a value
    recurse      : recursive;
*/
#include<stdio.h>
#define sucess_value 999
#define null_value -999
int list[5];
int lenght = 0;
int temp,index,n,val,Search,del,cas;
//insert value in a array
int insert(int val,int x)
{
    if(lenght>x)
    {
        return null_value;
    }
    list[lenght] = val;
    lenght ++;
    return sucess_value;
}
// print the values of array
void print_value()
{
    printf("\n");
    for(int i =0;i<lenght;i++)
    {
        printf("%d ",list[i]);
    }

}
// print the index of searching value
void print_index(int index)
{
    if(index == -999)
    {
        printf("\ninvalid value!");
    }
    else{
          printf("\nindex = %d",index);
          printf("\nposition = %d",index+1);
    }
}
// error text
void error_text()
{
    printf("\ninvalid iteam !!");
}
// check function
void check(int iteam)
{
    if(iteam == 999)
    {
        printf("\nSuccess!! \n");
    }
    else{
        printf("\nfailed!! \n");
    }
}
// search a value
int search(int val)
{
    int i;
    for(i=0;i<lenght;i++)
    {
        if(list[i] == val)
        {
            return i;
        }
    }

    return null_value;

}
// delete index
int delete_index(int index)
{
    if(index >=lenght || index<0)
    {
        return null_value;
    }
    list[index] = list[lenght-1];
    lenght--;
    return sucess_value;
}
// delete item
int delete_iteam(int val)
{
    int index;
    index = search(val);
    if(index == null_value)
    {
        error_text();
    }
    else{
         int temp = delete_index(index);
        print_value();
    }
}
void insertAt(int pos,int val)
{
    pos = pos -1;
    if(pos>lenght)
    {
        error_text();
    }
    list[pos] = val;
    printf("\nafter changing value : ");
    print_value();
}
 int pos,change_val;

 int maximum(int a[],int lenght)
 {
     int max,i ;
     max = a[0];
     for(i=0;i<lenght;i++)
     {
         if(max<a[i])
         {
             max = a[i];
         }
     }
     return max;
 }
int minimum(int a[],int lenght)
 {
     int min,i;
     min = a[0];
     for(i=0;i<lenght;i++)
     {
         if(min>a[i])
         {
             min = a[i];
         }
     }
     return min;
 }
void recerse()
{
    printf("\n=============================================");
    printf("\n");
    int cas;
    lenght = 0;
    printf("\n\nDo you want to run this code again ?? \nif you want input '1' or if you don't want input '0' !! ");
    scanf("%d",&cas);
    switch (cas)
    {
    case 0:
        printf("\n\nOkey!! You can exit now... ");break;
    case 1:
        printf("\nhow many value do you want ?? ");
        scanf("%d",&n);

        //insert value
        for(int i=0;i<n;i++)
        {
            printf("[%d] [%d] : ",i,i+1);
            scanf("%d",&val);
            insert(val,n);
        }
        printf("your inserts values : ");
        print_value();
        printf("\n\nwhich value do you want to search ?? ");
        scanf("%d",&Search);
        print_index(search(Search));

        printf("\n\nDelete a index But index should be ( 0 - %d )  ",n-1);
        scanf("%d",&del);
        check(delete_index(del));
        printf("\nafter deleting the index is %d :",del);
        print_value();
        printf("\nEnter position : ");
    scanf("%d",&pos);
    printf("\nEnter value : ");
    scanf("%d",&change_val);
    insertAt(pos,change_val);
    int m =  maximum(list,lenght);
    int n =  minimum(list,lenght);
    printf("\nMaximum  = %d",m);
    printf("\nMinimum  = %d",n);
    default:
        printf("\ninvalid input!!");
    }
    printf("\n");
    if(cas == 0)
    {
        printf("\n\nThank to you using this arrayList");
        printf("\n");
    }
    else if(cas == 1){
        recerse();
    }
}
int main()
{
    printf("\nhow many value do you want ?? ");
    scanf("%d",&n);
    //insert value
    for(int i=0;i<n;i++)
    {
        printf("[%d] [%d] : ",i,i+1);
        scanf("%d",&val);
        insert(val,n);
    }
    printf("your inserts values : ");
    print_value();
    printf("\n\nwhich value do you want to search ?? ");
    scanf("%d",&Search);
    print_index(search(Search));

    printf("\n\nDelete a index But index should be ( 0 - %d ) ",n-1);
    scanf("%d",&del);
    check(delete_index(del));
    printf("\nafter deleting the index is %d :",del);
    print_value();
    printf("\n");
    printf("\nEnter insert position : ");
    scanf("%d",&pos);
    printf("\nEnter changing value : ");
    scanf("%d",&change_val);
    insertAt(pos,change_val);
    int m =  maximum(list,lenght);
    int n =  minimum(list,lenght);
    printf("\nMaximum  = %d",m);
    printf("\nMinimum  = %d",n);
    recerse();
    return 0;
}
